// This file was auto-generated by ML.NET Model Builder.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers.LightGbm;
using Microsoft.ML.Trainers;
using Microsoft.ML;

namespace PEClassifier_ConsoleApp1
{
    public partial class PEClassifier
    {
        /// <summary>
        /// Retrains model using the pipeline generated as part of the training process. For more information on how to load data, see aka.ms/loaddata.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainPipeline(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.ReplaceMissingValues(new[] { new InputOutputColumnPair(@"size_of_data", @"size_of_data"), new InputOutputColumnPair(@"virtual_address", @"virtual_address"), new InputOutputColumnPair(@"entropy", @"entropy"), new InputOutputColumnPair(@"virtual_size", @"virtual_size") })
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName: @"hash", outputColumnName: @"hash"))
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new[] { @"size_of_data", @"virtual_address", @"entropy", @"virtual_size", @"hash" }))
                                    .Append(mlContext.Regression.Trainers.LightGbm(new LightGbmRegressionTrainer.Options() { NumberOfLeaves = 76, NumberOfIterations = 4, MinimumExampleCountPerLeaf = 101, LearningRate = 0.999999776672986, LabelColumnName = @"malware", FeatureColumnName = @"Features", ExampleWeightColumnName = null, Booster = new GradientBooster.Options() { SubsampleFraction = 0.999999776672986, FeatureFraction = 0.969764479756752, L1Regularization = 2E-10, L2Regularization = 0.999999776672986 }, MaximumBinCountPerFeature = 315 }));

            return pipeline;
        }
    }
}
